#!/usr/bin/env node

/**
 * Script de prueba para el sistema de cierre de emergencia
 * Verifica que todas las funcionalidades est√©n implementadas correctamente
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando sistema de cierre de emergencia...\n');

// Verificar archivo main.cjs
const mainPath = path.join(__dirname, '..', 'main.cjs');
if (fs.existsSync(mainPath)) {
  const mainContent = fs.readFileSync(mainPath, 'utf8');
  
  console.log('‚úÖ main.cjs encontrado');
  
  // Verificar importaciones necesarias
  const requiredImports = ['globalShortcut', 'Tray', 'Menu'];
  const missingImports = requiredImports.filter(imp => !mainContent.includes(imp));
  
  if (missingImports.length === 0) {
    console.log('‚úÖ Todas las importaciones necesarias est√°n presentes');
  } else {
    console.log('‚ùå Faltan importaciones:', missingImports.join(', '));
  }
  
  // Verificar funci√≥n reallyQuit
  if (mainContent.includes('function reallyQuit')) {
    console.log('‚úÖ Funci√≥n reallyQuit implementada');
  } else {
    console.log('‚ùå Funci√≥n reallyQuit no encontrada');
  }
  
  // Verificar atajo global
  if (mainContent.includes('Control+Shift+Q')) {
    console.log('‚úÖ Atajo global Ctrl+Shift+Q configurado');
  } else {
    console.log('‚ùå Atajo global no configurado');
  }
  
  // Verificar icono de bandeja
  if (mainContent.includes('new Tray') && mainContent.includes('Salir (Forzar)')) {
    console.log('‚úÖ Icono de bandeja configurado');
  } else {
    console.log('‚ùå Icono de bandeja no configurado');
  }
  
  // Verificar manejadores de eventos
  const eventHandlers = [
    'unresponsive',
    'render-process-gone',
    'child-process-gone',
    'before-quit',
    'will-quit'
  ];
  
  const missingHandlers = eventHandlers.filter(handler => !mainContent.includes(handler));
  
  if (missingHandlers.length === 0) {
    console.log('‚úÖ Todos los manejadores de eventos est√°n implementados');
  } else {
    console.log('‚ùå Faltan manejadores de eventos:', missingHandlers.join(', '));
  }
  
} else {
  console.log('‚ùå main.cjs no encontrado');
}

// Verificar archivo preload.cjs
const preloadPath = path.join(__dirname, '..', 'preload.cjs');
if (fs.existsSync(preloadPath)) {
  const preloadContent = fs.readFileSync(preloadPath, 'utf8');
  
  console.log('\n‚úÖ preload.cjs encontrado');
  
  if (preloadContent.includes('emergencyQuit')) {
    console.log('‚úÖ Funci√≥n emergencyQuit expuesta al renderer');
  } else {
    console.log('‚ùå Funci√≥n emergencyQuit no expuesta');
  }
  
} else {
  console.log('\n‚ùå preload.cjs no encontrado');
}

// Verificar iconos necesarios
const assetsPath = path.join(__dirname, '..', 'assets');
const requiredIcons = ['favicon.ico', 'favicon_16x16.png'];

console.log('\nüîç Verificando iconos...');
requiredIcons.forEach(icon => {
  const iconPath = path.join(assetsPath, icon);
  if (fs.existsSync(iconPath)) {
    console.log(`‚úÖ ${icon} encontrado`);
  } else {
    console.log(`‚ùå ${icon} no encontrado`);
  }
});

// Verificar documentaci√≥n
const docsPath = path.join(__dirname, '..', 'EMERGENCY_EXIT_SYSTEM.md');
if (fs.existsSync(docsPath)) {
  console.log('\n‚úÖ Documentaci√≥n del sistema creada');
} else {
  console.log('\n‚ùå Documentaci√≥n del sistema no encontrada');
}

console.log('\nüìã Resumen de verificaci√≥n completado.');
console.log('Para probar el sistema:');
console.log('1. Ejecuta la aplicaci√≥n: npm start');
console.log('2. Prueba el atajo: Ctrl+Shift+Q');
console.log('3. Verifica el icono de bandeja en la bandeja del sistema');
console.log('4. Revisa los logs en la consola para confirmar la configuraci√≥n');
